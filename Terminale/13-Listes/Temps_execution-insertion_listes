{"metadata": {"kernelspec": {"display_name": "Python 3", "name": "python3", "language": "python"}, "language_info": {"nbconvert_exporter": "python", "mimetype": "text/x-python", "file_extension": ".py", "name": "python", "pygments_lexer": "ipython3", "version": "3.7.6", "codemirror_mode": {"name": "ipython", "version": 3}}}, "nbformat_minor": 4, "nbformat": 4, "cells": [{"cell_type": "markdown", "source": "# <center>Remplissage d'une liste - Mesure du temps d'ex\u00e9cution</center>", "metadata": {}}, {"cell_type": "markdown", "source": "Indiquez votre nom et votre pr\u00e9nom dans la cellule ci-dessous :", "metadata": {}}, {"cell_type": "code", "source": "# Nom : ", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "La cellule suivante permet d'utiliser les modules random, matplotlib et time.\n\n> Positionnez vous sur la cellule suivante, puis cliquez sur `Run`.", "metadata": {}}, {"cell_type": "code", "source": "## Import des modules\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport time", "metadata": {"trusted": true}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "---\n## Mise en place des outils", "metadata": {}}, {"cell_type": "markdown", "source": "### Le tableau statique\n\nOn impl\u00e9mente un tableau statique. Cette structure est non mutable.\n\nLa fonction *ajout_tete()* permet d'ajouter un nouvel \u00e9l\u00e9ment en t\u00eate du tableau. Pour cela, on proc\u00e8de de la fa\u00e7on suivante :\n- on cr\u00e9e un nouveau tableau dont la taille est \u00e9gale \u00e0 celle de l'ancien tableau + 1\n- on copie chaque \u00e9l\u00e9ment du tableau dans le nouveau tableau, en prenant soin de d\u00e9caler chaque \u00e9l\u00e9ment d'une case vers la droite\n- on ajoute le nouvel \u00e9l\u00e9ment x dans le nouveau tableau, en premi\u00e8re position\n\n> **Travail \u00e0 faire** : ex\u00e9cutez la cellule ci-dessous", "metadata": {}}, {"cell_type": "code", "source": "def ajout_tete(tableau, x):\n    new_tableau =  [0]*(len(tableau) + 1)\n    for i in range(0, len(tableau), 1):\n        new_tableau[i+1] = tableau[i]\n    new_tableau[0] = x\n    return new_tableau", "metadata": {"trusted": true}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "> **Travail \u00e0 faire** : Indiquez dans la cellule ci-dessous les instructions permettant d'ajouter la valeur 5 en t\u00eate du tableau *toto*", "metadata": {}}, {"cell_type": "code", "source": "toto = [2, 3, 6, 25, 9, 1, 4]\n##--Indiquez le code Python, puis cliquez sur Run--##\n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "> **Travail \u00e0 faire** : V\u00e9rifiez la bonne ex\u00e9cution de votre code en ex\u00e9cutant la cellule ci-dessous", "metadata": {}}, {"cell_type": "code", "source": "toto", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "### La liste cha\u00een\u00e9e\n\nGr\u00e2ce \u00e0 la programmation objet, on peut cr\u00e9er deux classes : **Maillon** et **Liste**. Chaque instance de la classe **Maillon** aura deux attributs :\n- valeur : \n- maillon_suivant (la cellule suivante) Lorsqu\u2019il n\u2019y a pas de cellule suivante, on utilise **None**. \n\nChaque instance de la classe **Liste** aura un seul attribut : *premier_maillon*\n\n> **Travail \u00e0 faire** : Ex\u00e9cutez la cellule suivante", "metadata": {}}, {"cell_type": "code", "source": "class Maillon:\n    def __init__(self, valeur, suivant):\n        self.valeur = valeur\n        self.maillon_suivant = suivant\n\nclass Liste:\n    def __init__(self, maillon):\n        self.premier_maillon = maillon\n    \n    def __str__(self):\n        chaine = \"\"\n        cell = self.premier_maillon\n        while cell != None:\n            chaine = chaine + str(cell.valeur)\n            if cell.maillon_suivant != None:\n                chaine = chaine + \" -> \"\n            cell = cell.maillon_suivant\n        return chaine\n        \n    def ajout_tete(self, valeur):\n        cell = Maillon(valeur, self.premier_maillon)\n        self.premier_maillon = cell", "metadata": {"trusted": true}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "> **Travail \u00e0 faire** : Indiquez dans la cellule ci-dessous les instructions permettant d'ajouter la valeur 5 en t\u00eate du tableau *toto*", "metadata": {}}, {"cell_type": "code", "source": "toto = Liste(Maillon(2, Maillon(3, Maillon(6, Maillon(25, Maillon(9, Maillon(1, Maillon(4, None))))))))\n##--Indiquez le code Python, puis cliquez sur Run--##\n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "> **Travail \u00e0 faire** : V\u00e9rifiez la bonne ex\u00e9cution de votre code en ex\u00e9cutant la cellule ci-dessous", "metadata": {}}, {"cell_type": "code", "source": "print(toto)", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "### Trac\u00e9 de courbes\nLa cellule suivante permet de d\u00e9finir la fonction $trace$, d\u00e9j\u00e0 vue dans un pr\u00e9c\u00e9dent TP.\n\n> Positionnez vous sur la cellule suivante, puis cliquez sur `Run`.", "metadata": {}}, {"cell_type": "code", "source": "def trace(x, y):\n    \"\"\"fonction qui trace un graphique avec X en abscisses et Y en ordonn\u00e9es\"\"\"\n    \n    plt.scatter(x, y, label= \"Dur\u00e9e d'ex\u00e9cution en fonction du nombre d'\u00e9l\u00e9ments dans une liste\")\n    plt.show()", "metadata": {"trusted": true}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "> Indiquez ci-dessous la commande Python permettant de tracer `liste2` en fonction de `liste1`.", "metadata": {}}, {"cell_type": "code", "source": "liste1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nliste2 = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n##--Indiquez le code Python, puis cliquez sur Run--##\n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "### Le module time\n    \nL'instruction  $time.perf\\_counter()$ s'utilise comme l'instruction $time.time()$ (Dur\u00e9e \u00e9x\u00e9cution = Temps de fin - Temps de d\u00e9part). Elle permet le chronom\u00e9trage du temps d'\u00e9x\u00e9cution d'un programme \u00e0 l'\u00e9chelle du syst\u00e8me en revoyant un r\u00e9el correspondant \u00e0 des fractions de secondes. Cette mesure de temps est issue d'un compteur avec une tr\u00e8s grande pr\u00e9cison pour mesurer des temps tr\u00e8s courts.\n\n> Indiquez ci-dessous la commande Python permettant de conna\u00eetre le temps issu de ce compteur.", "metadata": {}}, {"cell_type": "code", "source": "##--Indiquez le code Python, puis cliquez sur Run--##\nprint(time.perf_counter())", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "---\n## Trac\u00e9 du temps d'ex\u00e9cution en fonction du nombre n d'\u00e9l\u00e9ments \u00e0 ins\u00e9rer dans la liste\n\nPour voir l'\u00e9volution du temps d'ex\u00e9cution en fonction du nombre n d'\u00e9l\u00e9ments dans une liste, on va r\u00e9aliser la succession d'op\u00e9rations suivantes, o\u00f9 n repr\u00e9sente le nombre maximum d'\u00e9l\u00e9ments dans la liste:\n- cr\u00e9er une liste $liste\\_temps\\_tableau$ contenant n fois la valeur 0,\n- cr\u00e9er une liste $liste\\_n$ contenant [1, 2, . . . , n] (utilisez de pr\u00e9f\u00e9rence une liste par compr\u00e9hension),\n- it\u00e9rer sur $liste\\_n$. Pour chaque valeur i de la liste :\n    - utiliser la fonction perf\\_counter() du module time pour d\u00e9terminer le temps d'ex\u00e9cution de la fonction $ajout\\_tete()$ pour une liste de taille i. **ATTENTION : multiplier le temps par 1000 pour l'avoir directement en millisecondes**,\n        - cr\u00e9er une variable ***debut*** contenant la valeur de l'instruction $time.perf\\_counter()$\n        - ex\u00e9cuter la fonction $ajout\\_tete()$\n        - cr\u00e9er une variable ***fin*** contenant la valeur de l'instruction $time.perf\\_counter()$\n        - cr\u00e9er une variable ***duree*** contenant la diff\u00e9rence ***fin - debut***\n    - ins\u00e9rer dans liste_temps, la valeur du temps d'ex\u00e9cution pr\u00e9c\u00e9demment trouv\u00e9. **N'oubliez pas que pour n = 1, on remplit liste_temps[0]**,\n- utiliser la fonction $trace$ pour tracer le graphique donnant le temps d'ex\u00e9cution en fonction du nombre d'\u00e9l\u00e9ments dans la liste : temps_execution = f(i).\n\n\n#### \u00c9crivez une fonction $trace\\_temps\\_tableau$, d'argument `n`, permettant de r\u00e9aliser l'ensemble de ces op\u00e9rations.", "metadata": {}}, {"cell_type": "code", "source": "def trace_temps_tableau(n):    \n    ##--Indiquez le code Python, puis cliquez sur Run--##  \n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "Ex\u00e9cutez cette fonction lorsque n prend la valeur 10, 100.\n\n> Positionnez vous sur la cellule suivante, entrez le code Python r\u00e9pondant \u00e0 la consigne, puis cliquez sur `Run`.", "metadata": {}}, {"cell_type": "code", "source": "##--Indiquez le code Python, puis cliquez sur Run--##\n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "1. Quelle est la forme du graphique ?\n2. Le co\u00fbt en temps est-il lin\u00e9aire ?", "metadata": {}}, {"cell_type": "code", "source": "##--Ecrivez vos r\u00e9ponses ici, sans ex\u00e9cuter la cellule--##\n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "---\n## Comparaison du temps d'ex\u00e9cution\n\nOn va comparer le temps d'ex\u00e9cution de l'ajout en t\u00eate pour l'impl\u00e9mentation d'une liste par un tableau ou par une liste cha\u00een\u00e9e.\n\n> **Travail \u00e0 faire** : Ex\u00e9cutez la cellule ci-dessous", "metadata": {}}, {"cell_type": "code", "source": "def comparaison_temps(n):\n    liste_tableau = []\n    liste_chaine = Liste(Maillon(1, None))\n    liste_temps_tableau= n*[0]\n    liste_temps_chaine = n*[0]\n    liste_n = [i for i in range (1,n+1,1)]\n    for i in liste_n:\n        debut = 1000*time.perf_counter()\n        liste_tableau = ajout_tete(liste_tableau,0)\n        fin = 1000*time.perf_counter()\n        liste_temps_tableau[i-1] = fin-debut\n        debut = 1000*time.perf_counter()\n        liste_chaine.ajout_tete(0)\n        fin = 1000*time.perf_counter()\n        liste_temps_chaine[i-1] = fin-debut\n        \n    plt.scatter(liste_n, liste_temps_tableau, label= \"Dur\u00e9e d'ex\u00e9cution pour un tableau statique\")\n    plt.scatter(liste_n, liste_temps_chaine, label= \"Dur\u00e9e d'ex\u00e9cution pour une liste cha\u00een\u00e9e\")\n    plt.legend()\n    plt.show()", "metadata": {"trusted": true}, "execution_count": null, "outputs": []}, {"cell_type": "code", "source": "comparaison_temps(2000)", "metadata": {"trusted": true}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "---\n## Conclusion\n\nComparer les temps d'\u00e9x\u00e9cutions d'un tableau statique et d'une liste cha\u00een\u00e9e.", "metadata": {}}, {"cell_type": "code", "source": "##--Ecrivez vos r\u00e9ponses ici, sans ex\u00e9cuter la cellule--##\n", "metadata": {}, "execution_count": null, "outputs": []}, {"cell_type": "markdown", "source": "---\nEnregistrez votre Notebook (voir image ci-dessous), puis d\u00e9posez-le dans le casier de votre professeur.\n\n![enregistrer](enregistrer.png)", "metadata": {}}]}
